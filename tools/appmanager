#!/usr/bin/perl

use strict;
use warnings;
use utf8;

BEGIN {
  if (-e './setlib.cfg') {
    unshift @INC, '.';
  } elsif (-e '../bin/setlib.cfg') {
    unshift @INC, '../bin';
  }
  require 'setlib.cfg';
}

use Pod::Usage;
use Getopt::Long;

use Foswiki ();
use Foswiki::Contrib::VirtualHostingContrib::VirtualHost qw( VirtualHost );

sub main {

    my $subCommand;
    my %cfg = (
        help => 0,
        hostnames => [],
        subCommand => undef,
        subCommandArgs => [],
    );

    GetOptions(
        'help|h' => \$cfg{help},
        'host=s@' => \$cfg{hostnames},
        '<>' => sub {
            my( $arg ) = @_;
            if ($arg =~ m{^-}) {
                pod2usage(
                    -msg => "Usage error: Unknown option $arg.\n",
                    -exitval => 2,
                );
            } elsif(not defined $cfg{subCommand}) {
                $cfg{subCommand} = $arg;
            } else {
                push @{$cfg{subCommandArgs}}, $arg;
            }
        }
    );
    pod2usage(1) if $cfg{help};

    if (!@{$cfg{hostnames}}) {
        pod2usage(
            -msg => "Usage error: mandatory host parameter was not set.\n",
            -exitval => 2,
        );
    } elsif (not defined $cfg{subCommand}) {
        pod2usage(
            -msg => "Usage error: no subCommand was given\n",
            -exitval => 2,
        );
    }

    VirtualHost->run_on_each(sub {
            new Foswiki('admin');
            AppManagerCli::processSubCommand($cfg{subCommand}, $cfg{subCommandArgs});
        }, $cfg{hostnames});
}

exit main( \@ARGV ) if !caller(0);


package AppManagerCli;

use Pod::Usage;
use Try::Tiny;
use Scalar::Util qw( blessed );

use Foswiki::Plugins::AppManagerPlugin;
use Foswiki::Plugins::AppManagerPlugin::AppConfigCreator qw( AppConfigCreator );

sub processSubCommand {
    my ( $subCommand, $args ) = @_;

    if($subCommand eq 'install'){
        install(@$args);
    } elsif($subCommand eq 'list'){
        list(@$args);
    } elsif($subCommand eq 'uninstall'){
        uninstall(@$args);
    } elsif($subCommand eq 'multisite'){
        multisite(@$args);
    } elsif($subCommand eq 'create') {
        create(@$args);
    } else{
        pod2usage(
            -msg => "Unknown command '$subCommand'!\n",
            -exitval => 2,
        );
    }
}

sub create {
    my ( $jsonConfig ) = @_;
    try {
        my $creator = AppConfigCreator->new($jsonConfig);
        $creator->run();
    } catch {
        if ((blessed $_) && $_->isa('Foswiki::Plugins::AppManagerPlugin::AppManagerException')) {
            print "Error when trying to create AppContrib: '$_->{message}'\n";
        } else {
            die $_;
        }
    };
    exit;
}

sub multisite {
    my ( $operation ) = @_;

    if($operation eq "enable") {
        Foswiki::Plugins::AppManagerPlugin::_enableMultisite();
    } elsif($operation eq "disable") {
        Foswiki::Plugins::AppManagerPlugin::_disableMultisite();
    }
}

sub install{
    my ( $appName, $installName ) = @_;

    unless($appName){
        print "For installation please specify the app name\n";
        exit;
    }

    if($appName eq 'all'){
        Foswiki::Plugins::AppManagerPlugin::_installAll();
        exit;
    }

    my $appList = Foswiki::Plugins::AppManagerPlugin::_applist();
    my $appToInstall;
    foreach my $app (@$appList){
        if($app->{name} eq $appName){
            $appToInstall = $app;
        }
    }
    if(!$appToInstall){
        print("No app configuration found for app $appName\n");
        exit;
    }
    my $appDetails = Foswiki::Plugins::AppManagerPlugin::_appdetail($appToInstall->{id});
    my @installConfigs = @{$appDetails->{appConfig}->{installConfigs}};
    my $configToUse;
    if($installName){
        foreach my $installConfig (@installConfigs){
            if($installConfig->{name} eq $installName){
                $configToUse = $installConfig;
            }
        }
    }
    else {
        $configToUse = $installConfigs[0];
    }

    unless($configToUse){
        print "No install configuration found for $installName\n";
        exit;
    }

    my $installResult = Foswiki::Plugins::AppManagerPlugin::_install($appName, $configToUse);
    if($installResult->{success} eq "false"){
        print "Installation failed: ";
        print "$installResult->{message}\n";
    }
    else{
        print "Installation finished\n";
    }
    exit;
}

sub list{
    my $appList = Foswiki::Plugins::AppManagerPlugin::_applist();
    print "Apps managed by the AppManager:\n";
    foreach my $app (@$appList){
        print "\t$app->{name}\n";
        my $history = Foswiki::Plugins::AppManagerPlugin::_readHistory($app->{name});
        if($history->{installed} && ref($history->{installed}) eq "HASH" && %{$history->{installed}}){
            print "\t\tInstalled in: ";
            print join(",",keys(%{$history->{installed}}))."\n";
        }
        else{
            print "\t\tNot installed\n";
        }
    }
}

sub uninstall{
    my ( $appName, $webName ) = @_;

    unless($appName && $webName) {
        print "For uninstallation please specify the app name and the web name\n";
        exit;
    }

    Foswiki::Plugins::AppManagerPlugin::_uninstall($appName, $webName);
}

__END__


=head1 NAME

AppManager - installs Q.wiki Apps to host

=head1 SYNOPSIS

appmanager <command> [params...]

  Available commands:
    list
      Prints a list of all apps that can be installed via AppManager.
      It additionally prints a list of all webs where apps have been installed
      via AppManager.
      Examples:
          appmanager list
    install
      Installs an app given the app name and the install config name as params.
      If no install config is specified then the first defined install config
      in the appconfig is used (default install).
      If 'all' is used as install config parameter then all available apps are
      installed with the default installation.
      Examples:
          appmanager install MinutesAppContrib
          appmanager install MinutesAppContrib Multisite
          appmanager install all
    uninstall
      Uninstalls an app given the app name and the web name of the destination
      web used for installation.
      Examples:
          appmanager uninstall MinutesAppContrib Minutes
    multisite
      Used to automatically set/reset general settings for multisite Wikis
      (e.g. SitePreferences).
      Examples:
          appmanager multisite enable
          appmanager multisite disable
    create
      Creates a AppContrib from a json
      Example:
          appmanager create '{"appname": "TestAppContrib"}'
